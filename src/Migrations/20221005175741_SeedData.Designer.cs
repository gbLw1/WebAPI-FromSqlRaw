// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using base_de_dados.Context;

#nullable disable

namespace @base.Migrations
{
    [DbContext(typeof(MeuDbContext))]
    [Migration("20221005175741_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("base_de_dados.Models.Imovel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Aluguel")
                        .HasColumnType("float");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descritivo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProprietarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TipoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProprietarioId");

                    b.HasIndex("TipoId");

                    b.ToTable("Imoveis");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4232f2c4-a816-41f9-8a3b-8f0e1bef107b"),
                            Aluguel = 20000.0,
                            DataCadastro = new DateTime(2020, 10, 5, 14, 57, 41, 314, DateTimeKind.Local).AddTicks(8941),
                            Descritivo = "duplex com 2 suites ****",
                            Estado = "sp",
                            ProprietarioId = new Guid("65209a0d-2263-41a1-a277-e5abd00fa220"),
                            TipoId = new Guid("4c8de6be-914a-40e4-a671-4f00ea50417b")
                        },
                        new
                        {
                            Id = new Guid("dc3d5b85-0314-4477-82be-16cb10b40841"),
                            Aluguel = 10000.0,
                            DataCadastro = new DateTime(2020, 10, 5, 14, 57, 41, 314, DateTimeKind.Local).AddTicks(8949),
                            Descritivo = "2 quartos com 1 suite",
                            Estado = "RJ",
                            ProprietarioId = new Guid("951c32cf-f8a8-4048-addc-567e88a24d88"),
                            TipoId = new Guid("4c8de6be-914a-40e4-a671-4f00ea50417b")
                        },
                        new
                        {
                            Id = new Guid("a524a489-ac87-4e5a-9da3-43b0cd0564cf"),
                            Aluguel = 1640.25,
                            DataCadastro = new DateTime(2020, 10, 5, 14, 57, 41, 314, DateTimeKind.Local).AddTicks(8953),
                            Descritivo = "4 quartos com 2 suites",
                            Estado = "SP",
                            ProprietarioId = new Guid("04c4e003-a194-4d96-ad3f-057c59fe34bc"),
                            TipoId = new Guid("d060ba4f-44b9-44dc-8edf-5f3f2eb51475")
                        },
                        new
                        {
                            Id = new Guid("4848ac2c-07f9-41ae-ad5d-bdb2d4cda84b"),
                            Aluguel = 951.35000000000002,
                            DataCadastro = new DateTime(2020, 10, 5, 14, 57, 41, 314, DateTimeKind.Local).AddTicks(8958),
                            Descritivo = "casa terrea com 2 quartos",
                            Estado = "SP",
                            ProprietarioId = new Guid("04c4e003-a194-4d96-ad3f-057c59fe34bc"),
                            TipoId = new Guid("d060ba4f-44b9-44dc-8edf-5f3f2eb51475")
                        },
                        new
                        {
                            Id = new Guid("f451ee27-f5d6-4772-9479-e25fb6123d20"),
                            Aluguel = 1443.4200000000001,
                            DataCadastro = new DateTime(2020, 10, 5, 14, 57, 41, 314, DateTimeKind.Local).AddTicks(8963),
                            Descritivo = "chacara com piscina e churrasqueira e 2 ",
                            Estado = "SP",
                            ProprietarioId = new Guid("53945e77-7c5e-46f3-827c-8174d4a26794"),
                            TipoId = new Guid("c1e973af-fd45-4de9-a754-08b07c8cfa56")
                        },
                        new
                        {
                            Id = new Guid("864ab5f4-98eb-4afa-909c-51db0a987e9d"),
                            Aluguel = 2500.0,
                            DataCadastro = new DateTime(2020, 10, 5, 14, 57, 41, 314, DateTimeKind.Local).AddTicks(8969),
                            Descritivo = "sobrado com 3 quartos",
                            Estado = "RJ",
                            ProprietarioId = new Guid("38463aaa-e9d0-44ac-b7aa-0399465103a7"),
                            TipoId = new Guid("d060ba4f-44b9-44dc-8edf-5f3f2eb51475")
                        },
                        new
                        {
                            Id = new Guid("0252c521-40db-4d8b-8837-47dccc30fe25"),
                            Aluguel = 590.49000000000001,
                            DataCadastro = new DateTime(2020, 10, 5, 14, 57, 41, 314, DateTimeKind.Local).AddTicks(8973),
                            Descritivo = "loja terrea com banheiro",
                            Estado = "SP",
                            ProprietarioId = new Guid("951c32cf-f8a8-4048-addc-567e88a24d88"),
                            TipoId = new Guid("be00769e-7481-4fcb-8c64-6378931cdda3")
                        },
                        new
                        {
                            Id = new Guid("52bb3784-9b70-46eb-8ebb-797affbf61b1"),
                            Aluguel = 501.92000000000002,
                            DataCadastro = new DateTime(2020, 10, 5, 14, 57, 41, 314, DateTimeKind.Local).AddTicks(8978),
                            Descritivo = "kitnet com sala xbdfnbbbb",
                            Estado = "SP",
                            ProprietarioId = new Guid("04c4e003-a194-4d96-ad3f-057c59fe34bc"),
                            TipoId = new Guid("4c8de6be-914a-40e4-a671-4f00ea50417b")
                        },
                        new
                        {
                            Id = new Guid("6bfe7fe0-488b-4e66-b192-b35a67b102cb"),
                            Aluguel = 656.10000000000002,
                            DataCadastro = new DateTime(2020, 10, 5, 14, 57, 41, 314, DateTimeKind.Local).AddTicks(8982),
                            Descritivo = "casa na praia com 2 quartos",
                            Estado = "SP",
                            ProprietarioId = new Guid("04c4e003-a194-4d96-ad3f-057c59fe34bc"),
                            TipoId = new Guid("d060ba4f-44b9-44dc-8edf-5f3f2eb51475")
                        });
                });

            modelBuilder.Entity("base_de_dados.Models.Inquilino", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sexo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Inquilinos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a5533bd8-f1a6-42a5-839f-63f6b55f47f8"),
                            Nome = "Jose",
                            Sexo = "M"
                        },
                        new
                        {
                            Id = new Guid("4a6fe6d2-693a-4e4b-8bbf-b6a9169ec169"),
                            Nome = "João",
                            Sexo = "M"
                        },
                        new
                        {
                            Id = new Guid("97d2dd37-fbaf-4d8e-b618-003e20dbdbb7"),
                            Nome = "Maria",
                            Sexo = "F"
                        },
                        new
                        {
                            Id = new Guid("5f2c27f5-d24e-41c2-8322-50ed3bb0d5d2"),
                            Nome = "Rute",
                            Sexo = "F"
                        },
                        new
                        {
                            Id = new Guid("f5ffaafc-beae-4b0f-a53c-b0947348fb88"),
                            Nome = "Manoel",
                            Sexo = "M"
                        },
                        new
                        {
                            Id = new Guid("1bbf3fb8-f669-47d7-a390-967034f34c26"),
                            Nome = "Antonio",
                            Sexo = "M"
                        });
                });

            modelBuilder.Entity("base_de_dados.Models.Locacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataLocacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ImovelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InquilinoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ImovelId");

                    b.HasIndex("InquilinoId");

                    b.ToTable("Locacao");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7483b16b-df4e-4154-9113-5bf72c7693ed"),
                            DataLocacao = new DateTime(2022, 10, 5, 14, 57, 41, 314, DateTimeKind.Local).AddTicks(9030),
                            ImovelId = new Guid("dc3d5b85-0314-4477-82be-16cb10b40841"),
                            InquilinoId = new Guid("a5533bd8-f1a6-42a5-839f-63f6b55f47f8")
                        },
                        new
                        {
                            Id = new Guid("a3d3937b-e4c5-4737-91df-1ef8b8a2a24b"),
                            DataLocacao = new DateTime(2022, 10, 5, 14, 57, 41, 314, DateTimeKind.Local).AddTicks(9037),
                            ImovelId = new Guid("a524a489-ac87-4e5a-9da3-43b0cd0564cf"),
                            InquilinoId = new Guid("4a6fe6d2-693a-4e4b-8bbf-b6a9169ec169")
                        },
                        new
                        {
                            Id = new Guid("a60c5d9f-3da0-4b27-b0ab-03bdb0ede62b"),
                            DataLocacao = new DateTime(2022, 10, 5, 14, 57, 41, 314, DateTimeKind.Local).AddTicks(9041),
                            ImovelId = new Guid("4848ac2c-07f9-41ae-ad5d-bdb2d4cda84b"),
                            InquilinoId = new Guid("97d2dd37-fbaf-4d8e-b618-003e20dbdbb7")
                        },
                        new
                        {
                            Id = new Guid("f5065e20-be18-41fc-843c-7446b9383545"),
                            DataLocacao = new DateTime(2022, 10, 5, 14, 57, 41, 314, DateTimeKind.Local).AddTicks(9044),
                            ImovelId = new Guid("0252c521-40db-4d8b-8837-47dccc30fe25"),
                            InquilinoId = new Guid("5f2c27f5-d24e-41c2-8322-50ed3bb0d5d2")
                        },
                        new
                        {
                            Id = new Guid("ba164ecc-35d3-456a-adc3-59801d02f3da"),
                            DataLocacao = new DateTime(2022, 10, 5, 14, 57, 41, 314, DateTimeKind.Local).AddTicks(9048),
                            ImovelId = new Guid("f451ee27-f5d6-4772-9479-e25fb6123d20"),
                            InquilinoId = new Guid("f5ffaafc-beae-4b0f-a53c-b0947348fb88")
                        },
                        new
                        {
                            Id = new Guid("3f64b8b8-7adb-48a0-9f14-e675fc8986a0"),
                            DataLocacao = new DateTime(2022, 10, 5, 14, 57, 41, 314, DateTimeKind.Local).AddTicks(9054),
                            ImovelId = new Guid("52bb3784-9b70-46eb-8ebb-797affbf61b1"),
                            InquilinoId = new Guid("1bbf3fb8-f669-47d7-a390-967034f34c26")
                        });
                });

            modelBuilder.Entity("base_de_dados.Models.Proprietario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Nascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sexo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Proprietarios");

                    b.HasData(
                        new
                        {
                            Id = new Guid("65209a0d-2263-41a1-a277-e5abd00fa220"),
                            Nascimento = new DateTime(2002, 10, 5, 14, 57, 41, 314, DateTimeKind.Local).AddTicks(8824),
                            Nome = "wdson",
                            Sexo = "M"
                        },
                        new
                        {
                            Id = new Guid("04c4e003-a194-4d96-ad3f-057c59fe34bc"),
                            Nascimento = new DateTime(2002, 10, 5, 14, 57, 41, 314, DateTimeKind.Local).AddTicks(8844),
                            Nome = "lucas",
                            Sexo = "M"
                        },
                        new
                        {
                            Id = new Guid("53945e77-7c5e-46f3-827c-8174d4a26794"),
                            Nascimento = new DateTime(2002, 10, 5, 14, 57, 41, 314, DateTimeKind.Local).AddTicks(8847),
                            Nome = "patricia",
                            Sexo = "F"
                        },
                        new
                        {
                            Id = new Guid("38463aaa-e9d0-44ac-b7aa-0399465103a7"),
                            Nascimento = new DateTime(2002, 10, 5, 14, 57, 41, 314, DateTimeKind.Local).AddTicks(8850),
                            Nome = "gabriel",
                            Sexo = "M"
                        },
                        new
                        {
                            Id = new Guid("951c32cf-f8a8-4048-addc-567e88a24d88"),
                            Nascimento = new DateTime(2002, 10, 5, 14, 57, 41, 314, DateTimeKind.Local).AddTicks(8852),
                            Nome = "cação",
                            Sexo = "M"
                        });
                });

            modelBuilder.Entity("base_de_dados.Models.Tipo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descritivo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tipos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c8de6be-914a-40e4-a671-4f00ea50417b"),
                            Descritivo = "apartamento"
                        },
                        new
                        {
                            Id = new Guid("d060ba4f-44b9-44dc-8edf-5f3f2eb51475"),
                            Descritivo = "casa"
                        },
                        new
                        {
                            Id = new Guid("c1e973af-fd45-4de9-a754-08b07c8cfa56"),
                            Descritivo = "chacara"
                        },
                        new
                        {
                            Id = new Guid("be00769e-7481-4fcb-8c64-6378931cdda3"),
                            Descritivo = "sala comercial"
                        });
                });

            modelBuilder.Entity("base_de_dados.Models.Imovel", b =>
                {
                    b.HasOne("base_de_dados.Models.Proprietario", "Proprietario")
                        .WithMany()
                        .HasForeignKey("ProprietarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("base_de_dados.Models.Tipo", "Tipo")
                        .WithMany()
                        .HasForeignKey("TipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proprietario");

                    b.Navigation("Tipo");
                });

            modelBuilder.Entity("base_de_dados.Models.Locacao", b =>
                {
                    b.HasOne("base_de_dados.Models.Imovel", "Imovel")
                        .WithMany()
                        .HasForeignKey("ImovelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("base_de_dados.Models.Inquilino", "Inquilino")
                        .WithMany()
                        .HasForeignKey("InquilinoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Imovel");

                    b.Navigation("Inquilino");
                });
#pragma warning restore 612, 618
        }
    }
}
